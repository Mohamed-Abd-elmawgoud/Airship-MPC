// Generated by gencpp from file neural_network_msgs/NeuralNetworkFeedback.msg
// DO NOT EDIT!


#ifndef NEURAL_NETWORK_MSGS_MESSAGE_NEURALNETWORKFEEDBACK_H
#define NEURAL_NETWORK_MSGS_MESSAGE_NEURALNETWORKFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace neural_network_msgs
{
template <class ContainerAllocator>
struct NeuralNetworkFeedback_
{
  typedef NeuralNetworkFeedback_<ContainerAllocator> Type;

  NeuralNetworkFeedback_()
    : header()
    , ymin(0)
    , ymax(0)
    , xcenter(0)
    , debug_included(false)
    , head_raw(0)
    , feet_raw(0)
    , ycenter(0)  {
    }
  NeuralNetworkFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ymin(0)
    , ymax(0)
    , xcenter(0)
    , debug_included(false)
    , head_raw(0)
    , feet_raw(0)
    , ycenter(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _ymin_type;
  _ymin_type ymin;

   typedef int16_t _ymax_type;
  _ymax_type ymax;

   typedef int16_t _xcenter_type;
  _xcenter_type xcenter;

   typedef uint8_t _debug_included_type;
  _debug_included_type debug_included;

   typedef int16_t _head_raw_type;
  _head_raw_type head_raw;

   typedef int16_t _feet_raw_type;
  _feet_raw_type feet_raw;

   typedef int16_t _ycenter_type;
  _ycenter_type ycenter;





  typedef boost::shared_ptr< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct NeuralNetworkFeedback_

typedef ::neural_network_msgs::NeuralNetworkFeedback_<std::allocator<void> > NeuralNetworkFeedback;

typedef boost::shared_ptr< ::neural_network_msgs::NeuralNetworkFeedback > NeuralNetworkFeedbackPtr;
typedef boost::shared_ptr< ::neural_network_msgs::NeuralNetworkFeedback const> NeuralNetworkFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator1> & lhs, const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ymin == rhs.ymin &&
    lhs.ymax == rhs.ymax &&
    lhs.xcenter == rhs.xcenter &&
    lhs.debug_included == rhs.debug_included &&
    lhs.head_raw == rhs.head_raw &&
    lhs.feet_raw == rhs.feet_raw &&
    lhs.ycenter == rhs.ycenter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator1> & lhs, const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neural_network_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cbb8a63be188eb83ce5036283cdca4b";
  }

  static const char* value(const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cbb8a63be188eb8ULL;
  static const uint64_t static_value2 = 0x3ce5036283cdca4bULL;
};

template<class ContainerAllocator>
struct DataType< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neural_network_msgs/NeuralNetworkFeedback";
  }

  static const char* value(const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16 ymin\n"
"int16 ymax\n"
"int16 xcenter\n"
"\n"
"#Debug stuff\n"
"bool debug_included\n"
"int16 head_raw\n"
"int16 feet_raw\n"
"int16 ycenter\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ymin);
      stream.next(m.ymax);
      stream.next(m.xcenter);
      stream.next(m.debug_included);
      stream.next(m.head_raw);
      stream.next(m.feet_raw);
      stream.next(m.ycenter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NeuralNetworkFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neural_network_msgs::NeuralNetworkFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ymin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ymin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ymax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ymax);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "xcenter: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xcenter);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "debug_included: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.debug_included);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "head_raw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.head_raw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "feet_raw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.feet_raw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ycenter: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ycenter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEURAL_NETWORK_MSGS_MESSAGE_NEURALNETWORKFEEDBACK_H
