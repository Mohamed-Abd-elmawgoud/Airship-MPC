// Generated by gencpp from file librepilot/AutopilotInfo.msg
// DO NOT EDIT!


#ifndef LIBREPILOT_MESSAGE_AUTOPILOTINFO_H
#define LIBREPILOT_MESSAGE_AUTOPILOTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace librepilot
{
template <class ContainerAllocator>
struct AutopilotInfo_
{
  typedef AutopilotInfo_<ContainerAllocator> Type;

  AutopilotInfo_()
    : header()
    , status(0)
    , fractional_progress(0.0)
    , error(0.0)
    , pathDirection()
    , pathCorrection()
    , pathTime(0.0)
    , Mode(0)
    , ModeParameters()
    , Start()
    , End()
    , StartingVelocity(0.0)
    , EndingVelocity(0.0)
    , VelocityDesired()  {
      ModeParameters.assign(0.0);
  }
  AutopilotInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , fractional_progress(0.0)
    , error(0.0)
    , pathDirection(_alloc)
    , pathCorrection(_alloc)
    , pathTime(0.0)
    , Mode(0)
    , ModeParameters()
    , Start(_alloc)
    , End(_alloc)
    , StartingVelocity(0.0)
    , EndingVelocity(0.0)
    , VelocityDesired(_alloc)  {
  (void)_alloc;
      ModeParameters.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _status_type;
  _status_type status;

   typedef double _fractional_progress_type;
  _fractional_progress_type fractional_progress;

   typedef double _error_type;
  _error_type error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pathDirection_type;
  _pathDirection_type pathDirection;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pathCorrection_type;
  _pathCorrection_type pathCorrection;

   typedef double _pathTime_type;
  _pathTime_type pathTime;

   typedef int32_t _Mode_type;
  _Mode_type Mode;

   typedef boost::array<double, 4>  _ModeParameters_type;
  _ModeParameters_type ModeParameters;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Start_type;
  _Start_type Start;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _End_type;
  _End_type End;

   typedef double _StartingVelocity_type;
  _StartingVelocity_type StartingVelocity;

   typedef double _EndingVelocity_type;
  _EndingVelocity_type EndingVelocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _VelocityDesired_type;
  _VelocityDesired_type VelocityDesired;





  typedef boost::shared_ptr< ::librepilot::AutopilotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::librepilot::AutopilotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct AutopilotInfo_

typedef ::librepilot::AutopilotInfo_<std::allocator<void> > AutopilotInfo;

typedef boost::shared_ptr< ::librepilot::AutopilotInfo > AutopilotInfoPtr;
typedef boost::shared_ptr< ::librepilot::AutopilotInfo const> AutopilotInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::librepilot::AutopilotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::librepilot::AutopilotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::librepilot::AutopilotInfo_<ContainerAllocator1> & lhs, const ::librepilot::AutopilotInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.fractional_progress == rhs.fractional_progress &&
    lhs.error == rhs.error &&
    lhs.pathDirection == rhs.pathDirection &&
    lhs.pathCorrection == rhs.pathCorrection &&
    lhs.pathTime == rhs.pathTime &&
    lhs.Mode == rhs.Mode &&
    lhs.ModeParameters == rhs.ModeParameters &&
    lhs.Start == rhs.Start &&
    lhs.End == rhs.End &&
    lhs.StartingVelocity == rhs.StartingVelocity &&
    lhs.EndingVelocity == rhs.EndingVelocity &&
    lhs.VelocityDesired == rhs.VelocityDesired;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::librepilot::AutopilotInfo_<ContainerAllocator1> & lhs, const ::librepilot::AutopilotInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace librepilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::librepilot::AutopilotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::librepilot::AutopilotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::librepilot::AutopilotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::librepilot::AutopilotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::librepilot::AutopilotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::librepilot::AutopilotInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::librepilot::AutopilotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae8ca9840bd6e08502338cc32e60e5db";
  }

  static const char* value(const ::librepilot::AutopilotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae8ca9840bd6e085ULL;
  static const uint64_t static_value2 = 0x02338cc32e60e5dbULL;
};

template<class ContainerAllocator>
struct DataType< ::librepilot::AutopilotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "librepilot/AutopilotInfo";
  }

  static const char* value(const ::librepilot::AutopilotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::librepilot::AutopilotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 status\n"
"float64 fractional_progress\n"
"float64 error\n"
"geometry_msgs/Vector3 pathDirection\n"
"geometry_msgs/Vector3 pathCorrection\n"
"float64 pathTime\n"
"int32 Mode\n"
"float64[4] ModeParameters\n"
"geometry_msgs/Vector3 Start\n"
"geometry_msgs/Vector3 End\n"
"float64 StartingVelocity\n"
"float64 EndingVelocity\n"
"geometry_msgs/Vector3 VelocityDesired\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::librepilot::AutopilotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::librepilot::AutopilotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.fractional_progress);
      stream.next(m.error);
      stream.next(m.pathDirection);
      stream.next(m.pathCorrection);
      stream.next(m.pathTime);
      stream.next(m.Mode);
      stream.next(m.ModeParameters);
      stream.next(m.Start);
      stream.next(m.End);
      stream.next(m.StartingVelocity);
      stream.next(m.EndingVelocity);
      stream.next(m.VelocityDesired);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutopilotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::librepilot::AutopilotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::librepilot::AutopilotInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "fractional_progress: ";
    Printer<double>::stream(s, indent + "  ", v.fractional_progress);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pathDirection: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pathDirection);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pathCorrection: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pathCorrection);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pathTime: ";
    Printer<double>::stream(s, indent + "  ", v.pathTime);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ModeParameters: ";
    if (v.ModeParameters.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.ModeParameters.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.ModeParameters[i]);
    }
    if (v.ModeParameters.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Start: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Start);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "End: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.End);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "StartingVelocity: ";
    Printer<double>::stream(s, indent + "  ", v.StartingVelocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "EndingVelocity: ";
    Printer<double>::stream(s, indent + "  ", v.EndingVelocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "VelocityDesired: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.VelocityDesired);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIBREPILOT_MESSAGE_AUTOPILOTINFO_H
