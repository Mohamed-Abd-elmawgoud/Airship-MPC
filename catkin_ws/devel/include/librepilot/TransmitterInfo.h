// Generated by gencpp from file librepilot/TransmitterInfo.msg
// DO NOT EDIT!


#ifndef LIBREPILOT_MESSAGE_TRANSMITTERINFO_H
#define LIBREPILOT_MESSAGE_TRANSMITTERINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace librepilot
{
template <class ContainerAllocator>
struct TransmitterInfo_
{
  typedef TransmitterInfo_<ContainerAllocator> Type;

  TransmitterInfo_()
    : header()
    , ROSControlled(0)
    , Armed(0)
    , FlightModeSwitch(0)
    , Roll(0.0)
    , Pitch(0.0)
    , Yaw(0.0)
    , Thrust(0.0)
    , Collective(0.0)
    , Throttle(0.0)
    , Accessory()  {
      Accessory.assign(0.0);
  }
  TransmitterInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ROSControlled(0)
    , Armed(0)
    , FlightModeSwitch(0)
    , Roll(0.0)
    , Pitch(0.0)
    , Yaw(0.0)
    , Thrust(0.0)
    , Collective(0.0)
    , Throttle(0.0)
    , Accessory()  {
  (void)_alloc;
      Accessory.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _ROSControlled_type;
  _ROSControlled_type ROSControlled;

   typedef int32_t _Armed_type;
  _Armed_type Armed;

   typedef int32_t _FlightModeSwitch_type;
  _FlightModeSwitch_type FlightModeSwitch;

   typedef double _Roll_type;
  _Roll_type Roll;

   typedef double _Pitch_type;
  _Pitch_type Pitch;

   typedef double _Yaw_type;
  _Yaw_type Yaw;

   typedef double _Thrust_type;
  _Thrust_type Thrust;

   typedef double _Collective_type;
  _Collective_type Collective;

   typedef double _Throttle_type;
  _Throttle_type Throttle;

   typedef boost::array<double, 4>  _Accessory_type;
  _Accessory_type Accessory;





  typedef boost::shared_ptr< ::librepilot::TransmitterInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::librepilot::TransmitterInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TransmitterInfo_

typedef ::librepilot::TransmitterInfo_<std::allocator<void> > TransmitterInfo;

typedef boost::shared_ptr< ::librepilot::TransmitterInfo > TransmitterInfoPtr;
typedef boost::shared_ptr< ::librepilot::TransmitterInfo const> TransmitterInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::librepilot::TransmitterInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::librepilot::TransmitterInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::librepilot::TransmitterInfo_<ContainerAllocator1> & lhs, const ::librepilot::TransmitterInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ROSControlled == rhs.ROSControlled &&
    lhs.Armed == rhs.Armed &&
    lhs.FlightModeSwitch == rhs.FlightModeSwitch &&
    lhs.Roll == rhs.Roll &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Yaw == rhs.Yaw &&
    lhs.Thrust == rhs.Thrust &&
    lhs.Collective == rhs.Collective &&
    lhs.Throttle == rhs.Throttle &&
    lhs.Accessory == rhs.Accessory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::librepilot::TransmitterInfo_<ContainerAllocator1> & lhs, const ::librepilot::TransmitterInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace librepilot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::librepilot::TransmitterInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::librepilot::TransmitterInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::librepilot::TransmitterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::librepilot::TransmitterInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::librepilot::TransmitterInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::librepilot::TransmitterInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::librepilot::TransmitterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "157af9dabf4ea5c891d7a24aed868284";
  }

  static const char* value(const ::librepilot::TransmitterInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x157af9dabf4ea5c8ULL;
  static const uint64_t static_value2 = 0x91d7a24aed868284ULL;
};

template<class ContainerAllocator>
struct DataType< ::librepilot::TransmitterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "librepilot/TransmitterInfo";
  }

  static const char* value(const ::librepilot::TransmitterInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::librepilot::TransmitterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 ROSControlled\n"
"int32 Armed\n"
"int32 FlightModeSwitch\n"
"float64 Roll\n"
"float64 Pitch\n"
"float64 Yaw\n"
"float64 Thrust\n"
"float64 Collective\n"
"float64 Throttle\n"
"float64[4] Accessory\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::librepilot::TransmitterInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::librepilot::TransmitterInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ROSControlled);
      stream.next(m.Armed);
      stream.next(m.FlightModeSwitch);
      stream.next(m.Roll);
      stream.next(m.Pitch);
      stream.next(m.Yaw);
      stream.next(m.Thrust);
      stream.next(m.Collective);
      stream.next(m.Throttle);
      stream.next(m.Accessory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransmitterInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::librepilot::TransmitterInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::librepilot::TransmitterInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ROSControlled: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ROSControlled);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Armed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Armed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "FlightModeSwitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.FlightModeSwitch);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Roll: ";
    Printer<double>::stream(s, indent + "  ", v.Roll);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Pitch: ";
    Printer<double>::stream(s, indent + "  ", v.Pitch);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Yaw: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Thrust: ";
    Printer<double>::stream(s, indent + "  ", v.Thrust);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Collective: ";
    Printer<double>::stream(s, indent + "  ", v.Collective);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Throttle: ";
    Printer<double>::stream(s, indent + "  ", v.Throttle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Accessory: ";
    if (v.Accessory.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.Accessory.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.Accessory[i]);
    }
    if (v.Accessory.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIBREPILOT_MESSAGE_TRANSMITTERINFO_H
