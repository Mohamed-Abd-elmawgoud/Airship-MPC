# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from librepilot/AutopilotInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class AutopilotInfo(genpy.Message):
  _md5sum = "ae8ca9840bd6e08502338cc32e60e5db"
  _type = "librepilot/AutopilotInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 status
float64 fractional_progress
float64 error
geometry_msgs/Vector3 pathDirection
geometry_msgs/Vector3 pathCorrection
float64 pathTime
int32 Mode
float64[4] ModeParameters
geometry_msgs/Vector3 Start
geometry_msgs/Vector3 End
float64 StartingVelocity
float64 EndingVelocity
geometry_msgs/Vector3 VelocityDesired

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','status','fractional_progress','error','pathDirection','pathCorrection','pathTime','Mode','ModeParameters','Start','End','StartingVelocity','EndingVelocity','VelocityDesired']
  _slot_types = ['std_msgs/Header','int32','float64','float64','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','int32','float64[4]','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,fractional_progress,error,pathDirection,pathCorrection,pathTime,Mode,ModeParameters,Start,End,StartingVelocity,EndingVelocity,VelocityDesired

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AutopilotInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = 0
      if self.fractional_progress is None:
        self.fractional_progress = 0.
      if self.error is None:
        self.error = 0.
      if self.pathDirection is None:
        self.pathDirection = geometry_msgs.msg.Vector3()
      if self.pathCorrection is None:
        self.pathCorrection = geometry_msgs.msg.Vector3()
      if self.pathTime is None:
        self.pathTime = 0.
      if self.Mode is None:
        self.Mode = 0
      if self.ModeParameters is None:
        self.ModeParameters = [0.] * 4
      if self.Start is None:
        self.Start = geometry_msgs.msg.Vector3()
      if self.End is None:
        self.End = geometry_msgs.msg.Vector3()
      if self.StartingVelocity is None:
        self.StartingVelocity = 0.
      if self.EndingVelocity is None:
        self.EndingVelocity = 0.
      if self.VelocityDesired is None:
        self.VelocityDesired = geometry_msgs.msg.Vector3()
    else:
      self.header = std_msgs.msg.Header()
      self.status = 0
      self.fractional_progress = 0.
      self.error = 0.
      self.pathDirection = geometry_msgs.msg.Vector3()
      self.pathCorrection = geometry_msgs.msg.Vector3()
      self.pathTime = 0.
      self.Mode = 0
      self.ModeParameters = [0.] * 4
      self.Start = geometry_msgs.msg.Vector3()
      self.End = geometry_msgs.msg.Vector3()
      self.StartingVelocity = 0.
      self.EndingVelocity = 0.
      self.VelocityDesired = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i9di().pack(_x.status, _x.fractional_progress, _x.error, _x.pathDirection.x, _x.pathDirection.y, _x.pathDirection.z, _x.pathCorrection.x, _x.pathCorrection.y, _x.pathCorrection.z, _x.pathTime, _x.Mode))
      buff.write(_get_struct_4d().pack(*self.ModeParameters))
      _x = self
      buff.write(_get_struct_11d().pack(_x.Start.x, _x.Start.y, _x.Start.z, _x.End.x, _x.End.y, _x.End.z, _x.StartingVelocity, _x.EndingVelocity, _x.VelocityDesired.x, _x.VelocityDesired.y, _x.VelocityDesired.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pathDirection is None:
        self.pathDirection = geometry_msgs.msg.Vector3()
      if self.pathCorrection is None:
        self.pathCorrection = geometry_msgs.msg.Vector3()
      if self.Start is None:
        self.Start = geometry_msgs.msg.Vector3()
      if self.End is None:
        self.End = geometry_msgs.msg.Vector3()
      if self.VelocityDesired is None:
        self.VelocityDesired = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.status, _x.fractional_progress, _x.error, _x.pathDirection.x, _x.pathDirection.y, _x.pathDirection.z, _x.pathCorrection.x, _x.pathCorrection.y, _x.pathCorrection.z, _x.pathTime, _x.Mode,) = _get_struct_i9di().unpack(str[start:end])
      start = end
      end += 32
      self.ModeParameters = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 88
      (_x.Start.x, _x.Start.y, _x.Start.z, _x.End.x, _x.End.y, _x.End.z, _x.StartingVelocity, _x.EndingVelocity, _x.VelocityDesired.x, _x.VelocityDesired.y, _x.VelocityDesired.z,) = _get_struct_11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i9di().pack(_x.status, _x.fractional_progress, _x.error, _x.pathDirection.x, _x.pathDirection.y, _x.pathDirection.z, _x.pathCorrection.x, _x.pathCorrection.y, _x.pathCorrection.z, _x.pathTime, _x.Mode))
      buff.write(self.ModeParameters.tostring())
      _x = self
      buff.write(_get_struct_11d().pack(_x.Start.x, _x.Start.y, _x.Start.z, _x.End.x, _x.End.y, _x.End.z, _x.StartingVelocity, _x.EndingVelocity, _x.VelocityDesired.x, _x.VelocityDesired.y, _x.VelocityDesired.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pathDirection is None:
        self.pathDirection = geometry_msgs.msg.Vector3()
      if self.pathCorrection is None:
        self.pathCorrection = geometry_msgs.msg.Vector3()
      if self.Start is None:
        self.Start = geometry_msgs.msg.Vector3()
      if self.End is None:
        self.End = geometry_msgs.msg.Vector3()
      if self.VelocityDesired is None:
        self.VelocityDesired = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.status, _x.fractional_progress, _x.error, _x.pathDirection.x, _x.pathDirection.y, _x.pathDirection.z, _x.pathCorrection.x, _x.pathCorrection.y, _x.pathCorrection.z, _x.pathTime, _x.Mode,) = _get_struct_i9di().unpack(str[start:end])
      start = end
      end += 32
      self.ModeParameters = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 88
      (_x.Start.x, _x.Start.y, _x.Start.z, _x.End.x, _x.End.y, _x.End.z, _x.StartingVelocity, _x.EndingVelocity, _x.VelocityDesired.x, _x.VelocityDesired.y, _x.VelocityDesired.z,) = _get_struct_11d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d = None
def _get_struct_11d():
    global _struct_11d
    if _struct_11d is None:
        _struct_11d = struct.Struct("<11d")
    return _struct_11d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_i9di = None
def _get_struct_i9di():
    global _struct_i9di
    if _struct_i9di is None:
        _struct_i9di = struct.Struct("<i9di")
    return _struct_i9di
